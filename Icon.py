import wx
import re
import os
import sys
import base64
import zipfile
from pathlib import Path
from typing import Dict

class Icon(wx.Bitmap):
    def __init__(self, img:wx.Image|wx.Bitmap):
        wx.Bitmap.__init__(self, img)

        self.Filename = ""

Icons: Dict[str, Icon] = { }
def GetIcon(name = '', powerset = '', power = ''):

    # If we haven't initialized the empty/fallback icon, do that now.
    if not 'Empty' in Icons:
        Icons['Empty'] = Icon(wx.Bitmap.NewFromPNGData(transparentPNG, len(transparentPNG)))

    # parse powerset and power to get name, if supplied
    if powerset and power:
        powerset = re.sub(r'\W+', '', powerset)
        power    = re.sub(r'\W+', '', power)
        name     = f"Powers/{powerset}_{power}"

    if not name in Icons:
        base_path = getattr(sys, '_MEIPASS', os.path.dirname(os.path.abspath(__file__)))

        iconzippath = Path(base_path) / 'icons' / 'Icons.zip'
        if iconzippath.exists():

            with zipfile.ZipFile(iconzippath) as iconzip:
                try:
                    icondata = iconzip.read(f"{name}.png")
                    Icons[name] = Icon( wx.Bitmap.NewFromPNGData(icondata, len(icondata)))
                    Icons[name].Filename = name
                except Exception as e:
                    wx.LogError(f"Loading icon {name} failed: {e}.  This is a bug.")

        else:  # we don't have the ZIP file, so maybe we're running directly from source
            filename = f"{base_path}/icons/{name}.png"
            if os.path.exists(filename):
                Icons[name] = Icon( wx.Image( filename, wx.BITMAP_TYPE_ANY, -1,))
                Icons[name].Filename = name
            else:
                print(f"Missing icon: {name}")

    return Icons.get(name, Icons['Empty'])

transparentPNG = base64.b64decode("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LTQyMWItOGVjMS1iNjEyODkxMDdlY2YiCiAgIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6OWU1N2VhYTgtYjAzOS00NGFkLTlkYzUtNzg3NzczNWU1NGY5IgogICB4bXBNTTpPcmlnaW5hbERvY3VtZW50SUQ9InhtcC5kaWQ6ZGJhMzkyYzEtNDA1ZS00NWJkLTgyYmEtMzg1NmIyY2ViMzI2IgogICBkYzpGb3JtYXQ9ImltYWdlL3BuZyIKICAgR0lNUDpBUEk9IjIuMCIKICAgR0lNUDpQbGF0Zm9ybT0iTGludXgiCiAgIEdJTVA6VGltZVN0YW1wPSIxNjY3MDkwNTY1MjQyNjg3IgogICBHSU1QOlZlcnNpb249IjIuMTAuMzIiCiAgIHRpZmY6T3JpZW50YXRpb249IjEiCiAgIHhtcDpDcmVhdG9yVG9vbD0iR0lNUCAyLjEwIgogICB4bXA6TWV0YWRhdGFEYXRlPSIyMDIyOjEwOjI5VDIwOjQyOjQ1LTA0OjAwIgogICB4bXA6TW9kaWZ5RGF0ZT0iMjAyMjoxMDoyOVQyMDo0Mjo0NS0wNDowMCI+CiAgIDx4bXBNTTpIaXN0b3J5PgogICAgPHJkZjpTZXE+CiAgICAgPHJkZjpsaQogICAgICBzdEV2dDphY3Rpb249InNhdmVkIgogICAgICBzdEV2dDpjaGFuZ2VkPSIvIgogICAgICBzdEV2dDppbnN0YW5jZUlEPSJ4bXAuaWlkOjQ5YjkyYTA2LWY5OGEtNDgzZi1hMGY4LTFjYjYzYzYxMDc1NSIKICAgICAgc3RFdnQ6c29mdHdhcmVBZ2VudD0iR2ltcCAyLjEwIChMaW51eCkiCiAgICAgIHN0RXZ0OndoZW49IjIwMjItMTAtMjlUMjA6NDI6NDUtMDQ6MDAiLz4KICAgIDwvcmRmOlNlcT4KICAgPC94bXBNTTpIaXN0b3J5PgogIDwvcmRmOkRlc2NyaXB0aW9uPgogPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgIAo8P3hwYWNrZXQgZW5kPSJ3Ij8+p4vxbAAAAAZiS0dEAAAAAAAA+UO7fwAAAAlwSFlzAAAuIwAALiMBeKU/dgAAAAd0SU1FB+YKHgAqLdwL+m8AAAALSURBVAjXY2AAAgAABQAB4iYFmwAAAABJRU5ErkJggg==")

